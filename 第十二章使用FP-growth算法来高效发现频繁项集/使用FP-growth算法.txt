本章内容：
	发现数据中的公式模式
	FP-growth算法
	发现Twitter源中的出现词
本章会在上一章讨论题的基础上进行扩展，将给出一个非常好的频繁项集发现算法。该算法称作FP-growth，它比上一章讨论的Apriori算法要快。它基于Apriori构建，但在完成相同任务时采用了一些不同的技术。这里的任务是将数据集存储在一个特定的称作FP树的结构之后发现频繁项集或者频繁项对，即常在一块出现的元素项的集合FP树，这种做法使得算法的执行速度要快于Apriori，通常性能要好两个数量级以上。
FP-growth算法只需要对数据库进行两次扫描。而Apriori算法对于每个潜在的频繁项集都会扫描数据集判定模式是否频繁，因此FP-growth算法的速度要比Apriori算法快。在小规模数据集上，这不是什么问题，但当处理更大数据集时，就会产生较大问题，FP-growth只会扫描数据集两次，它发现频繁项集的基本过程如下：
	（1）构建FP树
	（2）从FP树中挖掘频繁项集

12.1FP树：用于编码数据集的有效方式
	FP-growth算法：
	优点：一般要快于Apriori
	缺点：实现比较困难，在某些数据集上性能会下降
	适用数据类型：标称型数据。
FP-growth算法将数据存储在一种称为FP树的紧凑数据结构中。FP代表频繁模式。一棵FP树看上去与计算机科学中的其他树结构类似，但是它通过链接来链接相似元素，被连接起来的元素项可以看成一个链表。同搜索树不同的是，一个元素项可以在一棵FP树中出现多次，FP树会存储项集的出现频繁。而每个项集会以路径的方式存储在树中。存在相似元素的集合会共享树的一部分，只有当集合之间完全不同时，树才会分叉。树节点上给出集合中的单个元素及其在序列中出现的次数，路径会给出该序列的出现次数。

	FP-growth算法工作流程如下：首先构建FP树，然后利用它来挖掘频繁项集。为构建FP树，需要对原始数据集进行扫描两遍。第一遍对所有元素项的出现次数进行计数。记住第11章中给出的Apriori原理，即如果某元素是不频繁的，那么包含该元素的超集也是不频繁的，所以就不需要考虑这些超集。数据库中的第一遍扫描用来统计出现的频率，而第二遍中只考虑哪些频繁元素。
	FP-growth的一般流程：
	（1）收集数据：使用任意方法
	（2）准备数据：由于存储的是集合，所以需要离散数据。如果要处理连续数据，需要将他们量化为离散值
	（3）分析数据：使用任何方法
	（4）训练算法：构建一个FP树，并对树进行挖掘
	（5）测试算法：没有测试过程
	（6）使用算法：可用于识别经常出现的元素项，从而用于制定决策，推荐元素或进行预测等应用中。

12.2构建FP树：
	在第二次扫描数据集时会构建一棵FP树。为构建一棵树，需要一个容器来保存树。

12.3从一棵FP树中挖掘频繁项集
	有了FP树之后，就可以抽取频繁项集了，这里的思路与Apriori算法类似，首先从单元素项集开始，然后在此基础上逐步构建更大的集合。
从FP树中抽取频繁项集的三个基本步骤如下：
	（1）从FP树中获得条件模式基
	（2）利用条件模式基，构建一个条件FP树
	（3）迭代重复步骤（1）步骤（2），直到树包含一个元素项为止。

12.3.1抽取条件模式基（第一步）：
首先从上一节发现的已经保存在头指针表中的单个频繁元素项开始。对于每一个元素项，获得其对应的条件模式基。条件模式基是以所查找元素项为结尾的路径集合。每一条路径其实都是 一条前缀路径。简而言之，一条前缀路径是介于所查找元素项与树根节点之间所有内容。
前缀路径将被用于构建条件FP树，但是现在暂时不需要考虑这件事。为了获得这些前缀路径，可以对树进行穷举式搜索，直到获得想要的频繁项为止，或者使用一个更有效的方法来加速搜索过程。可以利用先前创建的头指针表来得到一种更有效的方法。头指针表包含相同类型元素链表的起始指针。一旦达到了每一个元素项，就可以上溯这棵树直到根节点为止。

12.3.2创建条件FP树
